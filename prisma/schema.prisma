generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time DateTime @db.Timestamp(6)
  end_time   DateTime @db.Timestamp(6)
  company_id String   @db.Uuid
  user_id    String   @db.Uuid
  status     String   @db.VarChar(255)
  notes      String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model charge_station {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  location         String             @db.VarChar(255)
  company_id       String             @db.Uuid
  status           String             @db.VarChar(255)
  capacity         Int?
  charging_speed   Int?
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  company          company            @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  charging_history charging_history[]
}

model charging_history {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vehicle_id        String         @db.Uuid
  charge_station_id String         @db.Uuid
  start_time        DateTime       @db.Timestamp(6)
  end_time          DateTime       @db.Timestamp(6)
  energy_used       Int?
  cost              Int?
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  charge_station    charge_station @relation(fields: [charge_station_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicle           vehicle        @relation(fields: [vehicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?          @db.VarChar(255)
  address        String?          @db.VarChar(255)
  city           String?          @db.VarChar(255)
  state          String?          @db.VarChar(255)
  zip_code       String?          @db.VarChar(255)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user_id        String           @db.Uuid
  tenant_id      String           @db.VarChar(255)
  location       Float?
  appointment    appointment[]
  charge_station charge_station[]
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  company     company[]
  vehicle     vehicle[]
}

model vehicle {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String             @db.Uuid
  model            String             @db.VarChar(255)
  make             String             @db.VarChar(255)
  year             Int?
  battery_capacity Int?
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  charging_history charging_history[]
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
